{"version":3,"file":"component---src-pages-shuffle-js-03f88515adbe5edc5f59.js","mappings":"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","sources":["webpack://shuffleforspotify/./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://shuffleforspotify/./src/components/playlistCard.js","webpack://shuffleforspotify/./src/pages/shuffle.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import * as React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\n\nconst StyledContainer = styled(motion.div)`\n  width: 325px;\n  height: 80px;\n  display: table;\n  justify-content: flex-start;\n  border-radius: 4px;\n  padding: 0px;\n  overflow: hidden;\n  margin: 8px 0;\n  cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n  color: ${props => (props.disabled ? '#919496' : 'inherit')};\n}\n`\n\nconst StyledImageFrame = styled.div`\n  width: 80px;\n  height: 80px;\n  object-fit: contain;\n  display: table-cell;\n  overflow: hidden;\n  border-radius: 4px 0 0 4px;\n  `\n  \n  const StyledImage = styled.img`\n  object-fit: contain;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  opacity: ${props => (props.disabled ? '0.5' : '1')};\n  font-family: Arial, sans-serif;\n`\n\nconst StyledContent = styled.div`\n  width: auto;\n  height: 100%;\n  margin: auto;\n  padding-left: 25px;\n  display: table-cell;\n  vertical-align: middle;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: inherit;\n`\n\nconst PlaylistCard = ({children, image, onClick, disabled, loaded, item}) => {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <StyledContainer \n      layout\n      onClick={disabled ? () => {} : () => {\n        setSelected(true);\n        onClick(item);\n      }} \n      disabled={disabled} \n      loaded={loaded}\n      custom={selected}\n      initial={{\n        opacity: 0,\n        x: -200\n      }}\n      animate={{\n        opacity: 1,\n        x: 0,\n      }}\n      exit={{\n        opacity: 0,\n      }}\n      transition={{\n        type: \"spring\",\n        mass: 0.35,\n        stiffness: 75,\n        duration: 0.3\n      }}\n    >\n        <StyledImageFrame>\n          <StyledImage src={image} alt=\"playlist image\" disabled={disabled} />\n        </StyledImageFrame>\n        <StyledContent>{children}</StyledContent>\n    </StyledContainer>\n  )\n}\n\nPlaylistCard.propTypes = {\n  image: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  loaded: PropTypes.number,\n  item: PropTypes.object\n}\n\nPlaylistCard.defaultProps = {\n  image: 'https://res.cloudinary.com/carlton-dev/image/upload/v1635664043/Shuffle-for-Spotify/Album_sqqo3t.jpg',\n  disabled: false,\n  loaded: 0\n}\n\nexport default PlaylistCard","import * as React from 'react';\nimport { navigate } from 'gatsby';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport LibraryLayout from '../layout/libraryLayout.js';\nimport ContentContainer from '../components/contentContainer.js';\nimport LoadingSpinner from '../components/loadingSpinner';\nimport PlaylistCard from '../components/playlistCard';\nimport ErrorDialog from '../components/errorDialog'\nimport Button from '../components/button.js';\n\nconst ShufflePage = ({ location }) => {\n  const [playlists, setPlaylists] = React.useState({})\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(false);\n  const [selected, setSelected] = React.useState(null)\n\n  const fetchPlaylists = async (token) => {\n    const res = await fetch('https://api.spotify.com/v1/me/playlists', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n    }).then(response => {\n      return response.json()\n    }).then(response => {\n      console.log(response)\n      return {\n        error: response.error ? true : false,\n        data: response\n      }\n    }).catch(error => {\n      return {\n        error: true,\n        data: error\n      }\n    })\n\n    return res\n  }\n\n  React.useEffect(async () => {\n    // Set loading to true\n    setLoading(true);\n\n    // Check for state (state will be null if user navigates to this page directly)\n    if (!location.state) {\n      navigate('/')\n      return\n    }\n\n    // Fetch list of playlists for the current user\n    const response = await fetchPlaylists(location.state.token)\n    console.log(response)\n\n    // Check for error property in API response\n    if (response.error) {\n      setError(response.data.error);\n      setLoading(false);\n      return\n    }\n\n    // TODO: I think there's a better way to set these using destructuring\n    setPlaylists({\n      offset: response.data.offset,\n      limit: response.data.limit,\n      items: response.data.items,\n      total: response.data.total\n    })\n\n    setLoading(false);\n\n  }, [])\n\n  return (\n    <LibraryLayout>\n      {\n        // ContentContainer height snaps to smaller size when a playlist is selected.\n        // TODO: Add transition effect to the height proeprty of ContentContainer\n      }\n      <ContentContainer>\n        {\n          loading ? <LoadingSpinner /> : (\n            error ? <ErrorDialog>Error: <br/> {error.message}</ErrorDialog> : (\n              <div>\n                  <AnimatePresence>\n                <motion.h2 \n                  style={{fontSize: \"28px\", marginBottom: \"16px\" }}\n                  layout\n                  initial={{\n                    opacity: 0,\n                    x: -200\n                  }} \n                  animate={{\n                    opacity: 1,\n                    x: 0\n                  }}\n                  exit={{\n                    opacity: 0,\n                    x: 200\n                  }}\n                  transition={{\n                    type: \"spring\",\n                    mass: 0.35,\n                    stiffness: 75,\n                    duration: 0.3\n                  }}\n                >\n                  Select a playlist\n                </motion.h2>\n                {\n                  playlists.items.map((item) => {\n                    return (\n                      // Check to see if the user owns the current playlist\n                      <>\n                      <PlaylistCard \n                        image={item.images.length === 3 ? item.images[1].url : item.images[0].url} \n                        disabled={item.owner.id === location.state.id ? false : true} \n                        key={item.id}\n                        id={item.id}\n                        onClick={() => setSelected(item.id)}\n                        item={item}\n                      >\n                        <p style={{marginBottom:'4px', fontFamily: 'GothamSSm-Book', fontSize: '18px'}}>\n                        {item.name}\n                        </p>\n                        <p style={{color: '#919496', fontFamily: 'GothamSSm-Book', fontSize: '12px'}}>\n                          {item.tracks.total} Songs\n                        </p>\n                      </PlaylistCard>\n                      { selected === item.id && (\n                        <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\n                          <Button\n                            onClick={() => navigate('/shuffleprogress')}\n                            initial={{\n                              opacity: 0,\n                              scale: 0\n                            }} \n                            animate={{\n                              opacity: 1,\n                              scale: 1\n                            }}\n                            exit={{\n                              opacity: 0,\n                            }}\n                            transition={{\n                              type: \"spring\",\n                              mass: 0.35,\n                              stiffness: 75,\n                              duration: 0.3\n                            }}\n                            >SHUFFLE {item.tracks.total} SONG{item.tracks.total > 1 && \"S\"}</Button>\n                        </div>\n                      )}\n                      </>\n                    )\n                  })\n                }\n                <motion.div\n                  layout\n                  style={{display: 'flex', alignItems: 'center'}}\n                  layout\n                  initial={{\n                    opacity: 0,\n                    x: -200\n                  }} \n                  animate={{\n                    opacity: 1,\n                    x: 0\n                  }}\n                  exit={{\n                    opacity: 0,\n                    x: 200\n                  }}\n                  transition={{\n                    type: \"spring\",\n                    mass: 0.35,\n                    stiffness: 75,\n                    duration: 0.3\n                  }}\n                >\n                  { playlists.items < playlists.total && (\n                    <Button\n                      color=\"primary\"\n                      variant=\"outline\"\n                      animate={{\n                        opacity: 1,\n                        x: 0\n                      }}\n                      exit={{\n                        opacity: 0,\n                        x: 200\n                      }}\n                      transition={{\n                        type: \"spring\",\n                        mass: 0.35,\n                        stiffness: 75,\n                        duration: 0.3\n                      }}\n                      >\n                      LOAD MORE\n                    </Button>\n                  )\n                }\n                  </motion.div>\n                </AnimatePresence>\n                </div>\n            )\n          )\n        }\n      </ContentContainer>\n    </LibraryLayout>\n  )\n}\n\nexport default ShufflePage;"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","StyledContainer","styled","motion","props","disabled","StyledImageFrame","StyledImage","StyledContent","PlaylistCard","children","image","onClick","loaded","item","React","selected","setSelected","layout","custom","initial","opacity","x","animate","exit","transition","type","mass","stiffness","duration","src","alt","defaultProps","location","playlists","setPlaylists","loading","setLoading","error","setError","fetchPlaylists","token","fetch","method","headers","then","response","json","console","log","data","res","state","navigate","offset","limit","items","total","message","AnimatePresence","style","fontSize","marginBottom","map","images","length","url","owner","id","fontFamily","name","color","tracks","width","display","justifyContent","scale","alignItems","variant"],"sourceRoot":""}