{"version":3,"file":"component---src-pages-shuffle-js-94244533aa0d197b621b.js","mappings":"kQAKMA,EAAkBC,EAAAA,QAAAA,MAAAA,WAAH,yEAAGA,CAAH,kIAWfC,EAAmBD,EAAAA,QAAAA,GAAAA,WAAH,0EAAGA,CAAH,6GAShBE,EAAcF,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,gEAOXG,EAAgBH,EAAAA,QAAAA,GAAAA,WAAH,uEAAGA,CAAH,kKAWbI,EAAe,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,MAAuC,EAAhCC,SAAgC,EAAtBC,SAAsB,EAAZC,OAC1D,OACE,gBAACV,EAAD,KACE,0BACE,gBAACE,EAAD,KACE,gBAACC,EAAD,CAAaQ,IAAKJ,EAAOK,IAAI,oBAE/B,gBAACR,EAAD,KAAgBE,MAaxBD,EAAaQ,aAAe,CAC1BN,MAAO,uGACPC,UAAU,EACVC,UAAU,EACVC,OAAQ,GAGV,Q,UCiCA,G,OA/FoB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACrB,EAAkCC,EAAAA,SAAe,IAAjD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,EAAAA,UAAe,GAA7C,eAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,EAAAA,UAAe,GAAzC,eAAOK,EAAP,KAAcC,EAAd,KAEAC,QAAQC,IAAIT,GAEZ,IAAMU,EAAc,mCAAG,WAAOC,GAAP,uFACHC,MAAM,0CAA2C,CACjEC,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,sBAEjBI,MAAK,SAAAC,GACN,OAAOA,EAASC,UACfF,MAAK,SAAAC,GAEN,OADAR,QAAQC,IAAIO,GACL,CACLV,QAAOU,EAASV,MAChBY,KAAMF,MAbQ,OAeT,SAAAV,GACP,MAAO,CACLA,OAAO,EACPY,KAAMZ,MAnBW,cACfa,EADe,yBAuBdA,GAvBc,2CAAH,sDAqDpB,OA3BFlB,EAAAA,WAAA,iBAAgB,2FAEdI,GAAW,GAFG,SAKSK,EAAeV,EAASoB,MAAMT,OALvC,UAKRK,EALQ,OAMdR,QAAQC,IAAIO,IAGRA,EAASV,MATC,uBAUZC,EAASS,EAASE,KAAKZ,OACvBD,GAAW,GAXC,0BAgBdF,EAAa,CACXkB,OAAQL,EAASE,KAAKG,OACtBC,MAAON,EAASE,KAAKI,MACrBC,MAAOP,EAASE,KAAKK,MACrBC,MAAOR,EAASE,KAAKM,QAGvBnB,GAAW,GAvBG,4CAyBb,IAGC,gBAAC,IAAD,KACE,gBAAC,IAAD,KAEID,EAAU,gBAAC,IAAD,MACRE,EAAQ,gBAAC,IAAD,eAAoB,2BAApB,IAA2BA,EAAMmB,SACvC,gCACE,sBAAIC,MAAO,CAACC,SAAU,OAAQC,aAAc,SAA5C,qBACA,6BAEE1B,EAAUqB,MAAMM,KAAI,SAACC,GAEnB,OADAtB,QAAQC,IAAIqB,GAGV,gBAAC,EAAD,CAAcrC,MAA8B,IAAvBqC,EAAKC,OAAOC,OAAeF,EAAKC,OAAO,GAAGE,IAAMH,EAAKC,OAAO,GAAGE,IAAKtC,SAAUmC,EAAKI,MAAMC,KAAOnC,EAASoB,MAAMe,GAAmBC,IAAKN,EAAKK,IAC/J,qBAAGT,MAAO,CAACE,aAAa,MAAOS,WAAY,iBAAkBV,SAAU,SACpEG,EAAKQ,MAER,qBAAGZ,MAAO,CAACa,MAAO,UAAWF,WAAY,iBAAkBV,SAAU,SAClEG,EAAKU,OAAOhB,MADf","sources":["webpack://shuffleforspotify/./src/components/playlistCard.js","webpack://shuffleforspotify/./src/pages/shuffle.js"],"sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { StaticImage } from 'gatsby-plugin-image'\n\nconst StyledContainer = styled.tbody`\n  width: 325px;\n  height: 80px;\n  display: table;\n  justify-content: flex-start;\n  border-radius: 4px;\n  padding: 0px;\n  overflow: hidden;\n  margin: 8px 0;\n`\n\nconst StyledImageFrame = styled.td`\n  width: 80px;\n  height: 80px;\n  object-fit: contain;\n  display: table-cell;\n  overflow: hidden;\n  border-radius: 4px 0 0 4px;\n  `\n  \nconst StyledImage = styled.img`\n  object-fit: contain;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;  \n`\n\nconst StyledContent = styled.td`\n  width: auto;\n  height: 100%;\n  margin: auto;\n  padding-left: 25px;\n  display: table-cell;\n  vertical-align: middle;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.1);\n`\n\nconst PlaylistCard = ({children, image, selected, disabled, loaded}) => {\n  return (\n    <StyledContainer>\n      <tr>\n        <StyledImageFrame>\n          <StyledImage src={image} alt=\"playlist image\"/>\n        </StyledImageFrame>\n        <StyledContent>{children}</StyledContent>\n      </tr>\n    </StyledContainer>\n  )\n}\n\nPlaylistCard.propTypes = {\n  image: PropTypes.string,\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  loaded: PropTypes.number\n}\n\nPlaylistCard.defaultProps = {\n  image: 'https://res.cloudinary.com/carlton-dev/image/upload/v1635664043/Shuffle-for-Spotify/Album_sqqo3t.jpg',\n  selected: false,\n  disabled: false,\n  loaded: 0\n}\n\nexport default PlaylistCard","import * as React from 'react';\nimport LibraryLayout from '../layout/libraryLayout.js';\nimport ContentContainer from '../components/contentContainer.js';\nimport LoadingSpinner from '../components/loadingSpinner';\nimport PlaylistCard from '../components/playlistCard';\nimport ErrorDialog from '../components/errorDialog'\nimport Button from '../components/button.js';\n\nconst ShufflePage = ({ location }) => {\n  const [playlists, setPlaylists] = React.useState({})\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(false);\n\n  console.log(location)\n\n  const fetchPlaylists = async (token) => {\n    const res = await fetch('https://api.spotify.com/v1/me/playlists', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n    }).then(response => {\n      return response.json()\n    }).then(response => {\n      console.log(response)\n      return {\n        error: response.error ? true : false,\n        data: response\n      }\n    }).catch(error => {\n      return {\n        error: true,\n        data: error\n      }\n    })\n\n    return res\n  }\n\nReact.useEffect(async () => {\n  // Set loading to true\n  setLoading(true);\n\n  // Fetch list of playlists for the current user\n  const response = await fetchPlaylists(location.state.token)\n  console.log(response)\n\n  // Check for error property in API response\n  if (response.error) {\n    setError(response.data.error);\n    setLoading(false);\n    return\n  }\n\n  // TODO: I think there's a better way to set these using destructuring\n  setPlaylists({\n    offset: response.data.offset,\n    limit: response.data.limit,\n    items: response.data.items,\n    total: response.data.total\n  })\n\n  setLoading(false);\n\n}, [])\n\n  return (\n    <LibraryLayout>\n      <ContentContainer>\n        {\n          loading ? <LoadingSpinner /> : (\n            error ? <ErrorDialog>Error: <br/> {error.message}</ErrorDialog> : (\n              <>\n                <h2 style={{fontSize: \"28px\", marginBottom: '12px'}}>Select a playlist</h2>\n                <table>\n                {\n                  playlists.items.map((item) => {\n                    console.log(item)\n                    return (\n                      // Check to see if the user owns the current playlist\n                      <PlaylistCard image={item.images.length === 3 ? item.images[1].url : item.images[0].url} disabled={item.owner.id === location.state.id ? false : true} key={item.id}>\n                        <p style={{marginBottom:'4px', fontFamily: 'GothamSSm-Book', fontSize: '18px'}}>\n                          {item.name}\n                        </p>\n                        <p style={{color: '#919496', fontFamily: 'GothamSSm-Book', fontSize: '12px'}}>\n                          {item.tracks.total} Songs\n                        </p>\n                      </PlaylistCard>\n                    )\n                  })\n                }\n                </table>\n              </>\n            )\n          )\n        }\n      </ContentContainer>\n    </LibraryLayout>\n  )\n}\n\nexport default ShufflePage;"],"names":["StyledContainer","styled","StyledImageFrame","StyledImage","StyledContent","PlaylistCard","children","image","selected","disabled","loaded","src","alt","defaultProps","location","React","playlists","setPlaylists","loading","setLoading","error","setError","console","log","fetchPlaylists","token","fetch","method","headers","then","response","json","data","res","state","offset","limit","items","total","message","style","fontSize","marginBottom","map","item","images","length","url","owner","id","key","fontFamily","name","color","tracks"],"sourceRoot":""}